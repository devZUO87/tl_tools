---
description: 
globs: 
alwaysApply: false
---
---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules for tl_tools 项目

## 1. 项目结构与模块化
- 遵循分层架构，核心代码分布在 `src/` 下的 widgets、function、data、auth 四大模块。
- 每个模块职责单一，便于维护和扩展。
- 主入口为 `main.py`，负责应用初始化、注册校验和主窗口启动。
- 避免在主入口文件中编写业务逻辑，所有业务应封装在对应模块。

## 2. 用户操作流程
- 用户注册校验：启动时校验注册，未注册则弹窗注册。
- 选择文件夹，使用 data_oop.py 的 process_directory 提取为 Excel：用户选择一个包含原始数据的文件夹。程序调用 MeasurementData.process_directory，将所有原始数据（如 .xls）批量转换为标准 Excel 文件。
- 将识别的 Excel 整理导出为外业手簿：程序将提取到的 Excel 数据整理成外业手簿格式，并导出。用户可以直接在导出的 Excel 手簿中填写或修改数据。
- 填写外业手簿，或在程序中直接填写：用户可在 Excel 中填写，也可在程序表格界面直接填写/编辑。
- 填写完成后，按点名用 sort_and_calculate 进行测站与目标分组匹配：程序根据填写好的手簿，按“测站-目标”分组。如果有重复点名，界面上应有“上一个/下一个”按钮，方便用户切换查看。
- 计算分组后的数据的限差和往返不符值：对每组数据，计算限差、往返不符值等指标，并在界面或导出表格中展示。

## 3. 命名与代码风格
- 变量、函数、方法命名采用小写加下划线（snake_case）。
- 类名采用大驼峰（PascalCase）。
- 重要常量如表头、列索引等集中定义，避免魔法数字。
- 遵循 PEP 8 代码风格，注重可读性和一致性。

## 4. 认证与注册
- 认证逻辑集中在 `src/auth/auth.py` 的 `AuthManager` 类。
- 注册信息加密存储于本地 `AppData/Local/SeaRouteProcessor/auth.json`。
- 注册码校验包括机器码、签名、过期时间等多重校验。
- 未注册用户启动时弹出注册对话框，注册成功后方可进入主程序。

## 5. 数据流与表格
- 数据加载、分组、导出等服务逻辑集中在 `src/data/data_service.py` 的 `DataService` 类。
- 底层数据对象和分组逻辑在 `src/data/data_oop.py` 的 `MeasurementData` 类中实现。
- 分组数据结构为 `grouped_data[(测站, 目标)] = [数据列表]`，用于表格展示与后续计算。
- 表格组件如 `DraggableTableWidget` 支持行拖拽、导航、动态高亮等交互。

## 6. 计算逻辑
- 所有测量相关计算集中在 `src/function/measurement.py` 的 `Measurement.calculate_all` 静态方法。
- 计算逻辑与数据服务解耦，便于单元测试和复用。
- 数据导出支持原始数据与计算后数据两种格式，表头随导出类型动态调整。

## 7. UI 设计与约定
- 所有 UI 组件集中在 `src/widgets/` 目录下，主窗口为 `MainWindow`。
- 采用现代化 QSS 样式，控件风格统一。
- 菜单栏、状态栏、中心表格等均通过主窗口初始化。
- 弹窗、对话框均使用 PyQt6 标准组件。

## 8. 异常处理与日志
- 关键操作均应有异常捕获，异常信息通过日志和弹窗反馈。
- 所有异常均有详细日志输出，便于调试和维护。
- 临时文件、转换文件在数据处理后自动清理，避免磁盘污染。

## 9. 其他约定
- 遵循单一职责原则，业务逻辑与界面逻辑分离。
- 代码注释应简明扼要，说明复杂逻辑或特殊约定。





- 鼓励单元测试，确保核心计算和数据处理模块的正确性。 